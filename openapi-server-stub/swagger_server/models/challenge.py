# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Challenge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, challenge_name: str=None, company: str=None, won: bool=None):  # noqa: E501
        """Challenge - a model defined in Swagger

        :param challenge_name: The challenge_name of this Challenge.  # noqa: E501
        :type challenge_name: str
        :param company: The company of this Challenge.  # noqa: E501
        :type company: str
        :param won: The won of this Challenge.  # noqa: E501
        :type won: bool
        """
        self.swagger_types = {
            'challenge_name': str,
            'company': str,
            'won': bool
        }

        self.attribute_map = {
            'challenge_name': 'challenge_name',
            'company': 'company',
            'won': 'won'
        }
        self._challenge_name = challenge_name
        self._company = company
        self._won = won

    @classmethod
    def from_dict(cls, dikt) -> 'Challenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Challenge of this Challenge.  # noqa: E501
        :rtype: Challenge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenge_name(self) -> str:
        """Gets the challenge_name of this Challenge.

        challenge name.  # noqa: E501

        :return: The challenge_name of this Challenge.
        :rtype: str
        """
        return self._challenge_name

    @challenge_name.setter
    def challenge_name(self, challenge_name: str):
        """Sets the challenge_name of this Challenge.

        challenge name.  # noqa: E501

        :param challenge_name: The challenge_name of this Challenge.
        :type challenge_name: str
        """

        self._challenge_name = challenge_name

    @property
    def company(self) -> str:
        """Gets the company of this Challenge.

        company name.  # noqa: E501

        :return: The company of this Challenge.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Challenge.

        company name.  # noqa: E501

        :param company: The company of this Challenge.
        :type company: str
        """

        self._company = company

    @property
    def won(self) -> bool:
        """Gets the won of this Challenge.

        list of challenges won.  # noqa: E501

        :return: The won of this Challenge.
        :rtype: bool
        """
        return self._won

    @won.setter
    def won(self, won: bool):
        """Sets the won of this Challenge.

        list of challenges won.  # noqa: E501

        :param won: The won of this Challenge.
        :type won: bool
        """

        self._won = won
