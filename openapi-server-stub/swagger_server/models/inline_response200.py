# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.project import Project  # noqa: F401,E501
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_published: bool=None, projects: List[Project]=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param is_published: The is_published of this InlineResponse200.  # noqa: E501
        :type is_published: bool
        :param projects: The projects of this InlineResponse200.  # noqa: E501
        :type projects: List[Project]
        """
        self.swagger_types = {
            'is_published': bool,
            'projects': List[Project]
        }

        self.attribute_map = {
            'is_published': 'is_published',
            'projects': 'projects'
        }
        self._is_published = is_published
        self._projects = projects

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_published(self) -> bool:
        """Gets the is_published of this InlineResponse200.

        whether projects are published.  # noqa: E501

        :return: The is_published of this InlineResponse200.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published: bool):
        """Sets the is_published of this InlineResponse200.

        whether projects are published.  # noqa: E501

        :param is_published: The is_published of this InlineResponse200.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def projects(self) -> List[Project]:
        """Gets the projects of this InlineResponse200.

        list of projects.  # noqa: E501

        :return: The projects of this InlineResponse200.
        :rtype: List[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: List[Project]):
        """Sets the projects of this InlineResponse200.

        list of projects.  # noqa: E501

        :param projects: The projects of this InlineResponse200.
        :type projects: List[Project]
        """

        self._projects = projects
