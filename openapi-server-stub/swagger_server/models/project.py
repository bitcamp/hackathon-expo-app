# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.challenge import Challenge  # noqa: F401,E501
from swagger_server import util


class Project(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, challenges: List[Challenge]=None, challenges_won: List[Challenge]=None, project_id: str=None, project_name: str=None, project_url: str=None, table_number: int=None):  # noqa: E501
        """Project - a model defined in Swagger

        :param challenges: The challenges of this Project.  # noqa: E501
        :type challenges: List[Challenge]
        :param challenges_won: The challenges_won of this Project.  # noqa: E501
        :type challenges_won: List[Challenge]
        :param project_id: The project_id of this Project.  # noqa: E501
        :type project_id: str
        :param project_name: The project_name of this Project.  # noqa: E501
        :type project_name: str
        :param project_url: The project_url of this Project.  # noqa: E501
        :type project_url: str
        :param table_number: The table_number of this Project.  # noqa: E501
        :type table_number: int
        """
        self.swagger_types = {
            'challenges': List[Challenge],
            'challenges_won': List[Challenge],
            'project_id': str,
            'project_name': str,
            'project_url': str,
            'table_number': int
        }

        self.attribute_map = {
            'challenges': 'challenges',
            'challenges_won': 'challenges_won',
            'project_id': 'project_id',
            'project_name': 'project_name',
            'project_url': 'project_url',
            'table_number': 'table_number'
        }
        self._challenges = challenges
        self._challenges_won = challenges_won
        self._project_id = project_id
        self._project_name = project_name
        self._project_url = project_url
        self._table_number = table_number

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenges(self) -> List[Challenge]:
        """Gets the challenges of this Project.

        list of challenges applied to.  # noqa: E501

        :return: The challenges of this Project.
        :rtype: List[Challenge]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges: List[Challenge]):
        """Sets the challenges of this Project.

        list of challenges applied to.  # noqa: E501

        :param challenges: The challenges of this Project.
        :type challenges: List[Challenge]
        """

        self._challenges = challenges

    @property
    def challenges_won(self) -> List[Challenge]:
        """Gets the challenges_won of this Project.

        list of challenges won.  # noqa: E501

        :return: The challenges_won of this Project.
        :rtype: List[Challenge]
        """
        return self._challenges_won

    @challenges_won.setter
    def challenges_won(self, challenges_won: List[Challenge]):
        """Sets the challenges_won of this Project.

        list of challenges won.  # noqa: E501

        :param challenges_won: The challenges_won of this Project.
        :type challenges_won: List[Challenge]
        """

        self._challenges_won = challenges_won

    @property
    def project_id(self) -> str:
        """Gets the project_id of this Project.

        project id.  # noqa: E501

        :return: The project_id of this Project.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this Project.

        project id.  # noqa: E501

        :param project_id: The project_id of this Project.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_name(self) -> str:
        """Gets the project_name of this Project.

        project name.  # noqa: E501

        :return: The project_name of this Project.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this Project.

        project name.  # noqa: E501

        :param project_name: The project_name of this Project.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def project_url(self) -> str:
        """Gets the project_url of this Project.

        list of challenges won.  # noqa: E501

        :return: The project_url of this Project.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url: str):
        """Sets the project_url of this Project.

        list of challenges won.  # noqa: E501

        :param project_url: The project_url of this Project.
        :type project_url: str
        """

        self._project_url = project_url

    @property
    def table_number(self) -> int:
        """Gets the table_number of this Project.

        table number.  # noqa: E501

        :return: The table_number of this Project.
        :rtype: int
        """
        return self._table_number

    @table_number.setter
    def table_number(self, table_number: int):
        """Sets the table_number of this Project.

        table number.  # noqa: E501

        :param table_number: The table_number of this Project.
        :type table_number: int
        """

        self._table_number = table_number
